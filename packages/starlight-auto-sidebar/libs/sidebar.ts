import type { StarlightRouteData } from '@astrojs/starlight/route-data'
import type { HookParameters, StarlightUserConfig } from '@astrojs/starlight/types'

import { type Definitions, getDefinitionsForDirectory } from './definitions'
import type { StarlightAutoSidebarContext } from './vite'

// TODO(HiDeoo) some caching? what would be the things that could change between pages to invalidate the cache?

export async function getDefinitionsFromSidebarConfig(
  contentDir: URL,
  config: NonNullable<StarlightUserConfig['sidebar']>,
): Promise<Definitions> {
  let definitions: Definitions = {}

  for (const itemConfig of config) {
    if (isSidebarAutogeneratedGroupConfig(itemConfig)) {
      const dir = new URL(itemConfig.autogenerate.directory, contentDir)
      const dirDefinitions = await getDefinitionsForDirectory(dir)
      definitions[dir.pathname] = dirDefinitions
    } else if (isSidebarManualGroupConfig(itemConfig)) {
      definitions = { ...definitions, ...(await getDefinitionsFromSidebarConfig(contentDir, itemConfig.items)) }
    }
  }

  return definitions
}

export async function updateSidebarItems(
  items: SidebarItem[],
  context: StarlightAutoSidebarContext,
): Promise<SidebarItem[]> {
  const sidebar: SidebarItem[] = []

  for (const [index, itemConfig] of context.sidebar.entries()) {
    const item = items[index]
    if (!item) {
      continue
    } else if (isSidebarSlugItemConfig(itemConfig) || isSidebarLinkItemConfig(itemConfig)) {
      sidebar.push(item)
    } else if (isSidebarManualGroupConfig(itemConfig) && isSidebarGroup(item)) {
      sidebar.push({
        ...item,
        entries: await updateSidebarItems(item.entries, { ...context, sidebar: itemConfig.items }),
      })
    } else if (isSidebarAutogeneratedGroupConfig(itemConfig) && isSidebarGroup(item)) {
      sidebar.push({
        ...item,
        entries: await updateAutogeneratedGroup(itemConfig, item.entries, context),
      })
    }
  }

  return sidebar
}

async function updateAutogeneratedGroup(
  config: SidebarAutogeneratedGroupConfig,
  items: SidebarItem[],
  context: StarlightAutoSidebarContext,
  trail: string[] = [],
): Promise<SidebarItem[]> {
  return Promise.all(
    items.map(async (item) => {
      const itemTrail = [...trail, item.label]
      const dir = new URL(config.autogenerate.directory, context.contentDir)
      const definition = context.definitions[dir.pathname]?.[itemTrail.join('/')]

      if (item.type === 'group') {
        const label = definition?.label ?? item.label

        return {
          ...item,
          label,
          entries: await updateAutogeneratedGroup(config, item.entries, context, itemTrail),
        }
      }

      return {
        ...item,
        // TODO(HiDeoo)
        label: `${item.label} (modified)`,
      }
    }),
  )
}

function isSidebarSlugItemConfig(itemConfig: SidebarItemConfig): itemConfig is SidebarSlugItemConfig {
  return typeof itemConfig === 'string' || 'slug' in itemConfig
}

function isSidebarLinkItemConfig(itemConfig: SidebarItemConfig): itemConfig is SidebarLinkItemConfig {
  return typeof itemConfig === 'object' && 'link' in itemConfig
}

function isSidebarManualGroupConfig(itemConfig: SidebarItemConfig): itemConfig is SidebarManualGroupConfig {
  return typeof itemConfig === 'object' && 'items' in itemConfig
}

function isSidebarAutogeneratedGroupConfig(
  itemConfig: SidebarItemConfig,
): itemConfig is SidebarAutogeneratedGroupConfig {
  return typeof itemConfig === 'object' && 'autogenerate' in itemConfig
}

function isSidebarGroup(item: SidebarItem): item is SidebarGroup {
  return item.type === 'group'
}

export type SidebarItemConfig = NonNullable<HookParameters<'config:setup'>['config']['sidebar']>[number]
type SidebarSlugItemConfig = Extract<SidebarItemConfig, string | { slug: string }>
type SidebarLinkItemConfig = Extract<SidebarItemConfig, { link: string }>
type SidebarManualGroupConfig = Extract<SidebarItemConfig, { items: SidebarItemConfig[] }>
type SidebarAutogeneratedGroupConfig = Extract<SidebarItemConfig, { autogenerate: { directory: string } }>

type SidebarItem = StarlightRouteData['sidebar'][number]
type SidebarGroup = Extract<SidebarItem, { type: 'group' }>
